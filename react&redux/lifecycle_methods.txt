React components have several special methods that provide opportunities to perform actions at specific points in the lifecycle of a component.
These are called lifecycle methods, or lifecycle hooks, and allow you to catch components at certain points in time. 
This can be before they are rendered, before they update, before they receive props, before they unmount, and so on. 
Here is a list of some of the main lifecycle methods: 

componentWillMount() componentDidMount() shouldComponentUpdate() componentDidUpdate() componentWillUnmount()

Ex. =>
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
  }
  componentWillMount() {
    console.log("Hello there!");
  }
  render() {
    return <div />
  }
};



The best practice with React is to place API calls or any calls to your server in the lifecycle method componentDidMount().
This method is called after a component is mounted to the DOM. 
Any calls to setState() here will trigger a re-rendering of your component.
When you call an API in this method, and set your state with the data that the API returns,
it will automatically trigger an update once you receive the data.

class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      activeUsers: null
    };
  }
  componentDidMount() {
    setTimeout(() => {
      this.setState({
        activeUsers: 1273
      });
    }, 2500); // 2.5s 
  }
  render() {
    return (
      <div>
        <h1>Active Users: {this.state.activeUsers}</h1>
      </div>
    );
  }
}


The componentDidMount() method is also the best place to attach any event listeners you need to add for specific functionality.
React provides a synthetic event system which wraps the native event system present in browsers. 
This means that the synthetic event system behaves exactly the same regardless of the user's browser - even if 
the native events may behave differently between different browsers.

You've already been using some of these synthetic event handlers such as onClick(). 
React's synthetic event system is great to use for most interactions you'll manage on DOM elements. 
However, if you want to attach an event handler to the document or window objects, you have to do this directly.

class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      message: ''
    };
    this.handleEnter = this.handleEnter.bind(this);
    this.handleKeyPress = this.handleKeyPress.bind(this);
  }
  componentDidMount() {
    document.addEventListener("keydown", this.handleKeyPress);
  }
  componentWillUnmount() {
    document.removeEventListener("keydown", this.handleKeyPress);
  }
  handleEnter() {
    this.setState((state) => ({
      message: state.message + 'You pressed the enter key! '
    }));
  }
  handleKeyPress(event) {
    if (event.keyCode === 13) {
      this.handleEnter();
    }
  }
  render() {
    return (
      <div>
        <h1>{this.state.message}</h1>
      </div>
    );
  }
};
