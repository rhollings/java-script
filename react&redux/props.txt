 React: 'props'
 
 In React, you can pass props, or properties, to child components. 
 Say you have an App component which renders a child component called Welcome which is a stateless functional component.
 You can pass Welcome a user property by writing:

<App>
  <Welcome user='Mark' />
</App>

You use custom HTML attributes created by you and supported by React to be passed to the component.
In this case, the created property user is passed to the component Welcome. Since Welcome is a stateless functional component,
it has access to this value like so:

const Welcome = (props) => <h1>Hello, {props.user}!</h1>

To pass an /array/ to a JSX element, it must be treated as JavaScript and wrapped in curly braces.

<ParentComponent>
  <ChildComponent colors={["green", "blue", "red"]} />
</ParentComponent>

The child component then has access to the array property colors. 
Array methods such as join() can be used when accessing the property.

const ChildComponent = (props) => <p>{props.colors.join(', ')}</p> 

This will join all colors array items into a comma separated string and produce:  <p>green, blue, red</p> 

React also has an option to set /default/ props. You can assign default props to a component as a property
on the component itself and React assigns the default prop if necessary. 
This allows you to specify what a prop value should be if no value is explicitly provided.
For example, if you declare MyComponent.defaultProps = { location: 'San Francisco' }, 
you have defined a location prop that's set to the string San Francisco, unless you specify otherwise. 
React assigns default props if props are undefined, but if you pass null as the value for a prop, it will remain null.

React provides useful type-checking features to verify that components receive props of the correct type.
For example, your application makes an API call to retrieve data that you expect to be in an array,
which is then passed to a component as a prop. You can set propTypes on your component to require the data to be of type array. 
This will throw a useful warning when the data is of any other type.

It's considered a best practice to set propTypes when you know the type of a prop ahead of time.
You can define a propTypes property for a component in the same way you defined defaultProps.
Doing this will check that props of a given key are present with a given type.
Here's an example to require the type function for a prop called handleClick:

MyComponent.propTypes = { handleClick: PropTypes.func.isRequired }

In the example above, the PropTypes.func part checks that handleClick is a function.
Adding isRequired tells React that handleClick is a required property for that component. 
You will see a warning if that prop isn't provided. Also notice that func represents function.
Among the seven JavaScript primitive types, function and boolean (written as bool) are the only two that use unusual spelling.
In addition to the primitive types, there are other types available. For example, you can check that a prop is a React element.
Please refer to the documentation for all of the options.

Note: As of React v15.5.0, PropTypes is imported independently from React, like this: import PropTypes from 'prop-types';

Using /this.props/

Anytime you refer to a class component within itself, you use the this keyword.
To access props within a class component, you preface the code that you use to access it with this.
For example, if an ES6 class component has a prop called data, you write {this.props.data} in JSX.

class ReturnTempPassword extends React.Component {
  constructor(props) {
    super(props);

  }
  render() {
    return (
        <div>
            { /* Change code below this line */ }
            <p>Your temporary password is: <strong>{this.props.tempPassword}</strong></p>
            { /* Change code above this line */ }
        </div>
    );
  }
};

class ResetPassword extends React.Component {
  constructor(props) {
    super(props);

  }
  render() {
    return (
        <div>
          <h2>Reset Password</h2>
          <h3>We've generated a new temporary password for you.</h3>
          <h3>Please reset this password from your account settings ASAP.</h3>
          { /* Change code below this line */ }
          <ReturnTempPassword tempPassword={"greenbluered"} />
          { /* Change code above this line */ }
        </div>
    );
  }
};


================================================================================================================================================

class CampSite extends React.Component {  
  constructor(props) {  
    super(props); 
  } 
  render() {  
    return (  
      <div> 
        <Camper />  
      </div>  
    );  
  } 
};  
const Camper = props => <p>{props.name}</p> 

Camper.defaultProps = {name: "CamperBot"}

Camper.propTypes = {name: PropTypes.string.isRequired}

