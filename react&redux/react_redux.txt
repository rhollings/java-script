=> here's a review of some of the key principles of each technology.
React is a view library that you provide with data, then it renders the view in an efficient, predictable way.
Redux is a state management framework that you can use to simplify the management of your application's state. 
Typically, in a React Redux app, you create a single Redux store that manages the state of your entire app. 
Your React components subscribe to only the pieces of data in the store that are relevant to their role. 
Then, you dispatch actions directly from React components, which then trigger store updates.

Although React components can manage their own state locally, when you have a complex app,
it's generally better to keep the app state in a single location with Redux. 
There are exceptions when individual components may have local state specific only to them.
Finally, because Redux is not designed to work with React out of the box, you need to use the react-redux package.
It provides a way for you to pass Redux state and dispatch to your React components as props.


Start with a DisplayMessages component. Add a constructor to this component and initialize it with a state that has two properties: input,
that's set to an empty string, and messages, that's set to an empty array.

class DisplayMessages extends React.Component {
  // Change code below this line
  constructor(props) {
    super(props);
    this.state = {
      input: "",
      messages: []
    }
  }
  // Change code above this line
  render() {
    return <div />
  }
};

// Define ADD, addMessage(), messageReducer(), and store here:
const ADD = "ADD";
const addMessage = message => {
  return {
    type: ADD,
    message
  };
};

=========================================================

const messageReducer = (previousState = [], action) => {
  switch (action.type) {
    case ADD:
      return [...previousState, action.message];
      break;
    default:
      return previousState
  }
};

const store = Redux.createStore(messageReducer);
