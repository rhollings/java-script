You create state in a React component by declaring a state property on the component class in its constructor.
This initializes the component with state when it is created. The state property must be set to a JavaScript object. 
Declaring it looks like this:

this.state = {

}

=============================================================================

You have access to the state object throughout the life of your component. 
You can update it, render it in your UI, and pass it as props to child components. 
The state object can be as complex or as simple as you need it to be.
Note that you must create a class component by extending React.Component in order to create state like this.

class StatefulComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {name: "Frank"}
  }
  render() {
    return (
      <div>
        <h1>{this.state.name}</h1>
      </div>
    );
  }
};

=============================================================================

state is one of the most powerful features of components in React. 
It allows you to track important data in your app and render a UI in response to changes in this data. 
If your data changes, your UI will change. React uses what is called a virtual DOM,
to keep track of changes behind the scenes.
When state data updates, it triggers a re-render of the components using that data
- including child components that received the data as a prop.
React updates the actual DOM, but only where necessary.
This means you don't have to worry about changing the DOM. You simply declare what the UI should look like.

=============================================================================

 React provides a method for updating component state called setState. 
 You call the setState method within your component class like so: this.setState(),
 passing in an object with key-value pairs. The keys are your state properties and the values are the updated state data. 
 For instance, if we were storing a username in state and wanted to update it, it would look like this:

this.setState({
  username: 'Lewis'
});

=============================================================================

class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: 'Initial State'
    };
    this.handleClick = this.handleClick.bind(this);
  }
  handleClick() {
    // Change code below this line
    this.setState({name: 'React Rocks!'});
    // Change code above this line
  }
  render() {
    return (
      <div>
        <button onClick={this.handleClick}>Click Me</button>
        <h1>{this.state.name}</h1>
      </div>
    );
  }
};
